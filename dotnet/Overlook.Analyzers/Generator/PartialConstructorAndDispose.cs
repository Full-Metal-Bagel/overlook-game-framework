using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace Overlook.Analyzers;

[Generator]
public class PartialConstructorAndDispose : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
        // Register a syntax receiver to find struct declarations and constructor usages
        context.RegisterForSyntaxNotifications(() => new SyntaxReceiver());
    }

    public void Execute(GeneratorExecutionContext context)
    {
        // The SyntaxReceiver will have collected potential diagnostics
        if (context.SyntaxReceiver is not SyntaxReceiver receiver) return;

        var source = new StringBuilder(1024 * 16);
        source.Append("// <auto-generated/>");
        source.AppendLine();
        foreach (var group in receiver.PartialConstructors.GroupBy(c => c.Ancestors().OfType<ClassDeclarationSyntax>().First().Identifier.ToString()))
        {
            var className = group.Key;
            var @namespace = group.First().Ancestors().OfType<BaseNamespaceDeclarationSyntax>().FirstOrDefault();
            if (@namespace != null)
            {
                source.AppendLine($"namespace {@namespace.Name}");
                source.AppendLine("{");
                source.AppendLine($"public partial class {className}");
                source.AppendLine("{");
                source.AppendLine($"    public {className}()");
                source.AppendLine("    {");
                foreach (var constructor in group)
                {
                    source.AppendLine($"        {constructor.Identifier}();");
                }
                source.AppendLine("    }");
                source.AppendLine("}");
                source.AppendLine("}");
            }
        }
        context.AddSource("PartialConstructor.g.cs", SourceText.From(source.ToString(), Encoding.UTF8));

        source.Clear();
        source.Append("// <auto-generated/>");
        source.AppendLine();
        foreach (var group in receiver.PartialDisposes.GroupBy(c => c.Ancestors().OfType<ClassDeclarationSyntax>().First().Identifier.ToString()))
        {
            var className = group.Key;
            var @namespace = group.First().Ancestors().OfType<BaseNamespaceDeclarationSyntax>().FirstOrDefault();
            if (@namespace != null)
            {
                source.AppendLine($"namespace {@namespace.Name}");
                source.AppendLine("{");
                source.AppendLine($"public partial class {className} : System.IDisposable");
                source.AppendLine("{");
                source.AppendLine("    public bool IsDisposed { get; private set; } = false;");
                source.AppendLine("    public void Dispose()");
                source.AppendLine("    {");
                source.AppendLine("        if (IsDisposed) return;");
                source.AppendLine("        IsDisposed = true;");
                foreach (var dispose in group)
                {
                    source.AppendLine($"        {dispose.Identifier}();");
                }
                source.AppendLine("    }");
                source.AppendLine("}");
                source.AppendLine("}");
            }
        }
        context.AddSource("PartialDispose.g.cs", SourceText.From(source.ToString(), Encoding.UTF8));
    }

    class SyntaxReceiver : ISyntaxReceiver
    {
        public List<MethodDeclarationSyntax> PartialConstructors { get; } = new();
        public List<MethodDeclarationSyntax> PartialDisposes { get; } = new();

        public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
        {
            if (syntaxNode is not MethodDeclarationSyntax method) return;

            if (method.AttributeLists.SelectMany(attributes => attributes.Attributes)
                .Any(attribute => attribute.Name.ToString() == "PartialConstructor"))
            {
                PartialConstructors.Add(method);
            }
            else if (method.AttributeLists.SelectMany(attributes => attributes.Attributes)
                     .Any(attribute => attribute.Name.ToString() == "PartialDispose"))
            {
                PartialDisposes.Add(method);
            }
        }
    }
}
