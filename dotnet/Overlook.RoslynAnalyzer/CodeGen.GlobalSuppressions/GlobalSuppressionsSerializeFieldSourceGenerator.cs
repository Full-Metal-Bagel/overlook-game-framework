using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace CodeGen.GlobalSuppressions;

[Generator]
public class GlobalSuppressionsSerializeFieldSourceGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var provider = context.SyntaxProvider
            .CreateSyntaxProvider(
                (s, _) => s is FieldDeclarationSyntax,
                (ctx, _) => GetFieldDeclarationForSourceGen(ctx))
            .SelectMany((types, _) => types);

        context.RegisterSourceOutput(provider.Collect(), GenerateCode);
    }

    private static IEnumerable<FieldDeclarationSyntax> GetFieldDeclarationForSourceGen(GeneratorSyntaxContext context)
    {
        var fieldDeclarationSyntax = (FieldDeclarationSyntax)context.Node;
        if (HasAttributeOf(fieldDeclarationSyntax, "SerializeField"))
            yield return fieldDeclarationSyntax;
        yield break;

        bool HasAttributeOf(FieldDeclarationSyntax node, string attributeName)
        {
            return node.AttributeLists.SelectMany(al => al.Attributes).Any(attribute => attribute.Name.ToString() == attributeName);
        }
    }

    private void GenerateCode(SourceProductionContext context, ImmutableArray<FieldDeclarationSyntax> fieldDeclarations)
    {
        var code = new StringBuilder("// <auto-generated/>");
        code.AppendLine();
        foreach (var fieldName in fieldDeclarations.Select(node => node.GetFullName()))
        {
            code.AppendLine($$"""[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE0044:Add readonly modifier", Justification = "Suppress warning from Unity", Scope = "member", Target = "{{fieldName}}")]""");
        }
        context.AddSource("GlobalSuppressions.g.cs", SourceText.From(code.ToString(), Encoding.UTF8));
    }
}
