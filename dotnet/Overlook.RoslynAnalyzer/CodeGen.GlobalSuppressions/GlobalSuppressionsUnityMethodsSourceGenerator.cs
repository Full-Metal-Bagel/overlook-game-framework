using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace CodeGen.GlobalSuppressions;

[Generator]
public class GlobalSuppressionsUnityMethodsSourceGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var unityMethodsText = context.AdditionalTextsProvider.Where(t => t.Path.EndsWith("UnityMethods"));

        var provider = context.SyntaxProvider
            .CreateSyntaxProvider(
                (s, _) => s is ClassDeclarationSyntax,
                (ctx, _) => GetClassDeclarationForSourceGen(ctx))
            .SelectMany((types, _) => types);

        context.RegisterSourceOutput(provider.Collect().Combine(unityMethodsText.Collect()), (ctx, t) => GenerateCode(ctx, t.Left, t.Right));
    }

    private static IEnumerable<ClassDeclarationSyntax> GetClassDeclarationForSourceGen(GeneratorSyntaxContext context)
    {
        var classDeclarationSyntax = (ClassDeclarationSyntax)context.Node;
        if (IsSubClassOf(classDeclarationSyntax, context.SemanticModel, "MonoBehaviour"))
            yield return classDeclarationSyntax;
        yield break;

        bool IsSubClassOf(ClassDeclarationSyntax node, SemanticModel semanticModel, string baseClassName)
        {
            if (node.BaseList == null)
                return false;

            // Get the symbol for the class declaration
            var classSymbol = semanticModel.GetDeclaredSymbol(node);
            if (classSymbol == null)
                return false;

            // Traverse the base class hierarchy
            var baseType = classSymbol.BaseType;
            while (baseType != null)
            {
                if (baseType.Name.Equals(baseClassName, StringComparison.Ordinal))
                    return true;

                baseType = baseType.BaseType;
            }

            return false;
        }
    }

    private void GenerateCode(SourceProductionContext context, ImmutableArray<ClassDeclarationSyntax> classDeclarations, ImmutableArray<AdditionalText> unityMethods)
    {
        var code = new StringBuilder("// <auto-generated/>");
        code.AppendLine();
        foreach (var (className, methodName) in from file in unityMethods
                 from line in file.GetText()?.Lines ?? Enumerable.Empty<TextLine>()
                 where !string.IsNullOrEmpty(line.ToString())
                 from monoClass in classDeclarations
                 select (monoClass.GetFullName(), line.ToString()))
        {
            code.AppendLine($$"""[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE0051:Remove unused private members", Justification = "Suppress warning from Unity", Scope = "member", Target = "{{className}}.{{methodName}}")]""");
            code.AppendLine($$"""[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "CA1822:Mark members as static", Justification = "Suppress warning from Unity", Scope = "member", Target = "{{className}}.{{methodName}}")]""");
        }
        context.AddSource("GlobalSuppressions.g.cs", SourceText.From(code.ToString(), Encoding.UTF8));
    }
}
